{"version":3,"sources":["CONSTANTS.js","store/actions/actions.js","components/Login.js","components/Navbar.js","components/MessageContainer.js","components/FriendList.js","components/SideMenu.js","components/MessageArea.js","App.js","serviceWorker.js","store/reducers/rootReducer.js","index.js"],"names":["module","exports","SET_SOCKET","SET_NICKNAME","VERIFIY_USER","SET_ERROR","CREATE_USER","TYPING","RECIVE_TYPING","SET_TYPING","SET_MESSAGE","SEND_MESSAGE","RECIVE_MESSAGE","SEND_PMESSAGE","RECIVE_PMESSAGE","RECIVE_ONLINE","UPDATE_USERS","CHAT_WITH","setChatWith","val","dispatch","getState","type","sendMessage","dest","cont","Login","handleChange","e","_this","props","setNickname","target","value","handleClick","_this$props","nickname","setError","verifiyUser","userPattern","test","history","handleKeyPress","charCode","preventDefault","error","this","document","title","react_default","a","createElement","className","onChange","onKeyPress","placeholder","onClick","Component","connect","state","_getState","socket","emit","res","isUser","user","push","concat","Navbar","chatWith","_","$","toggleClass","MessageContainer","jMethods","requiredHeight","window","innerHeight","height","setMessage","message","messageTemplate","sender","date","moment","Date","toString","format","content","socketID","reciver","messagearea","focus","_this2","inter","setInterval","autosize","_this3","_this$props2","messages","typing","messageArray","map","index","key","ref","i","rows","dir","_ref","onlineUsers","friend","userLetter","SideMenu","handleShowOnline","arrow","children","text","slideToggle","handleLogout","handleGlobalClick","components_FriendList","enhance","compose","withRouter","MessageArea","Object","classCallCheck","undefined","possibleConstructorReturn","getPrototypeOf","call","clearInterval","react","components_SideMenu","components_Navbar","components_MessageContainer","App","socketURL","setSocket","setTyping","setUsers","io","on","msg","console","log","setTimeout","length","Switch","Route","path","exact","component","ownProps","Boolean","location","hostname","match","initState","global","rootReducer","arguments","action","objectSpread","defineProperty","toConsumableArray","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","BrowserRouter","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yEAAAA,EAAOC,QAAU,CACbC,WAAY,aACZC,aAAc,eACdC,aAAc,eACdC,UAAW,YACXC,YAAa,cACbC,OAAQ,SACRC,cAAe,gBACfC,WAAY,aACZC,YAAa,cACbC,aAAc,eACdC,eAAgB,iBAChBC,cAAe,gBACfC,gBAAiB,kBACjBC,cAAe,gBACfC,aAAc,eACdC,UAAW,2OCsBFC,EAAc,SAAAC,GACvB,OAAO,SAACC,EAAUC,GACdD,EAAS,CAAEE,KAAML,YAAWE,IAAKA,MAmB5BI,EAAc,SAACC,EAAMC,GAC9B,OAAO,SAACL,GACJA,EAAS,CACLE,KAAMX,eAAcQ,IAAK,CACrBK,KAAMA,EACNC,KAAMA,wBC5DhBC,6MAEFC,aAAe,SAACC,GACZC,EAAKC,MAAMC,YAAYH,EAAEI,OAAOC,UAGpCC,YAAc,SAACN,GAAM,IAAAO,EAC2BN,EAAKC,MAAzCM,EADSD,EACTC,SAAUC,EADDF,EACCE,SAAUC,EADXH,EACWG,YACxBT,EAAKU,YAAYC,KAAKJ,GACtBE,EAAYT,EAAKC,MAAMW,SAGvBJ,EAAS,8CAIjBK,eAAiB,SAAAd,GACM,KAAfA,EAAEe,WACFf,EAAEgB,iBACFf,EAAKK,YAAYN,OAIzBW,YAAc,+FAEL,IACGM,EAAUC,KAAKhB,MAAfe,MAER,OADAE,SAASC,MAAT,UAEIC,EAAAC,EAAAC,cAAA,WAASC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,WAASC,UAAU,iBACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,oBACAH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SACI7B,KAAK,OACL+B,SAAUP,KAAKnB,aACf2B,WAAYR,KAAKJ,eACjBa,YAAY,sBAChBN,EAAAC,EAAAC,cAAA,SAAIN,IAERI,EAAAC,EAAAC,cAAA,UAAQK,QAASV,KAAKZ,YAAakB,UAAU,mBAA7C,mBAxCAK,aA+DLC,cAhBS,SAACC,GACrB,MAAO,CACHvB,SAAUuB,EAAMvB,SAChBS,MAAOc,EAAMd,QAIM,SAACzB,GACxB,MAAO,CACHW,YAAa,SAACK,GDpDK,IAAAjB,ECoDUC,GDpDVD,ECoD+BiB,EDnD/C,SAAAhB,GACHA,EAAS,CAAEE,KAAMnB,eAAcgB,IAAKA,QCmDpCmB,YAAa,SAACF,GDjBK,IAAAjB,ECiBUC,GDjBVD,ECiB+BiB,EDhB/C,SAAChB,EAAUC,GAAa,IAAAuC,EACEvC,IAArBe,EADmBwB,EACnBxB,SAAUyB,EADSD,EACTC,OAClBA,EAAOC,KAAK1D,eAAcgC,EAAU,SAAC2B,GAC7BA,EAAIC,OACJ5C,EAAS,CAAEE,KAAMjB,YAAWc,IAAK,4BAEjC0C,EAAOC,KAAKxD,cAAayD,EAAIE,MAC7B7C,EAAS,CAAEE,KAAMhB,cAAaa,IAAK4C,EAAIE,OACvC9C,EAAI+C,KAAJ,IAAAC,OAAaJ,EAAIE,KAAK7B,kBCS9BC,SAAU,SAACQ,GDpCK,IAAA1B,ECoCOC,GDpCPD,ECoCyB0B,EDnCtC,SAAAzB,GACHA,EAAS,CAAEE,KAAMjB,YAAWc,IAAKA,UCuC1BuC,CAA6ChC,kBC9DtD0C,mLAEO,IACGC,EAAavB,KAAKhB,MAAlBuC,SACR,OACIpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,UAAQK,QAAS,SAAAc,GAAOC,EAAE,cAAcC,YAAY,WAAcpB,UAAU,eAAcH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,SAC1FH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACViB,EAASjC,SAAYiC,EAASjC,SAAY,mBARzCqB,aAqBNC,cANS,SAACC,GACrB,MAAO,CACHU,SAAUV,EAAMU,WAITX,CAAyBU,qCClBlCK,6MASFC,SAAW,SAAAJ,GACP,IAEIK,EAFeJ,EAAEK,QAAQC,cACVN,EAAE,gBAAgBM,cAErCN,EAAE,sBAAsBO,OAAOH,MAGnChD,aAAe,SAACC,GACZC,EAAKC,MAAMiD,WAAWnD,EAAEI,OAAOC,OAC/BJ,EAAKC,MAAM+B,OAAOC,KAAKvD,SAAQsB,EAAKC,MAAMmC,KAAK7B,aAGnDF,YAAc,SAACN,GAAM,IAAAO,EACwCN,EAAKC,MAAtDmC,EADS9B,EACT8B,KAAMJ,EADG1B,EACH0B,OAAQtC,EADLY,EACKZ,YAAayD,EADlB7C,EACkB6C,QAASX,EAD3BlC,EAC2BkC,SACxCY,EAAkB,CAClBC,OAAQjB,EAAK7B,SACb+C,KAAMC,KAAO,IAAIC,MAAOC,YAAYC,OAAO,mBAC3CC,QAASR,GAEbX,EAASoB,SAAW5B,EAAOC,KAAKjD,gBAAe,CAAE6E,QAASrB,EAASoB,SAAUD,QAASP,IAChFpB,EAAOC,KAAKnD,eAAcsE,GAEhC1D,EADW8C,EAASjC,SAAWiC,EAASjC,SAAW,SACjC6C,GAClBpD,EAAK8D,YAAY1D,MAAQ,GACzBJ,EAAK8D,YAAYC,WAGrBlD,eAAiB,SAACd,GACK,KAAfA,EAAEe,WACFf,EAAEgB,iBACFf,EAAKK,YAAYN,wFArCL,IAAAiE,EAAA/C,KAChBA,KAAKgD,MAAQC,YAAY,SAAAzB,GACrBuB,EAAKnB,YACN,KACHsB,IAASlD,KAAK6C,8CAqCT,IAAAM,EAAAnD,KAAAoD,EACwCpD,KAAKhB,MAA1CqE,EADHD,EACGC,SAAUlC,EADbiC,EACajC,KAAMmC,EADnBF,EACmBE,OAAQ/B,EAD3B6B,EAC2B7B,SAC5BgC,EAAehC,EAASjC,SAAW+D,EAAS9B,EAASjC,UAAY+D,EAAQ,OAE7E,OACIlD,EAAAC,EAAAC,cAAA,WAASC,UAAU,qBACfH,EAAAC,EAAAC,cAAA,WAASC,UAAU,gBAEXiD,EACIA,EAAaC,IAAI,SAACtB,EAASuB,GACvB,OACItD,EAAAC,EAAAC,cAAA,OAAKqD,IAAKD,EAAOnD,UAAS,WAAAe,OAAaa,EAAQE,SAAWjB,EAAK7B,SAAW,QAAU,KAChFa,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkB4B,EAAQE,QACxCjC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAmB4B,EAAQQ,SACxCvC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgB4B,EAAQG,SAIpD,MAGZlC,EAAAC,EAAAC,cAAA,WAASC,UAAU,iBAAiBiB,EAASjC,SAAW,KAAOgE,GAC/DnD,EAAAC,EAAAC,cAAA,WAASC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,YACII,YAAY,mBACZF,SAAUP,KAAKnB,aACf2B,WAAYR,KAAKJ,eACjB+D,IAAK,SAAAC,GAAC,OAAIT,EAAKN,YAAce,GAC7BC,KAAK,IAAIC,IAAI,SACjB3D,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBI,QAASV,KAAKZ,aAAae,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,kBAxEpDK,aAiGhBC,cAlBS,SAACC,GACrB,MAAO,CACHwC,SAAUxC,EAAMwC,SAChBlC,KAAMN,EAAMM,KACZe,QAASrB,EAAMqB,QACfnB,OAAQF,EAAME,OACduC,OAAQzC,EAAMyC,OACd/B,SAAUV,EAAMU,WAIG,SAACjD,GACxB,MAAO,CACHG,YAAa,SAACC,EAAMgE,GAAcpE,EAASG,EAAYC,EAAMgE,KAC7DT,WAAY,SAAC5D,GAAUC,EHvFL,SAAAD,GACtB,OAAO,SAAAC,GACHA,EAAS,CAAEE,KAAMZ,cAAaS,IAAKA,KGqFH4D,CAAW5D,OAIpCuC,CAA6Ce,GCvE7Cf,cAAQ,KAPI,SAACtC,GACxB,MAAO,CACHF,YAAa,SAAC+C,GAAW7C,EAASF,EAAY+C,OAKvCP,CA7BI,SAAAmD,GAAwC,IAArCC,EAAqCD,EAArCC,YAAa7C,EAAwB4C,EAAxB5C,KAAM/C,EAAkB2F,EAAlB3F,YAOrC,OACI+B,EAAAC,EAAAC,cAAA,WAASC,UAAU,eACd0D,EAAYR,IAAI,SAACS,EAAQR,GACtB,OAAOtC,EAAK7B,WAAa2E,EAAO3E,SAC5Ba,EAAAC,EAAAC,cAAA,OAAKqD,IAAKD,EAAOnD,UAAU,SAASI,QAAS,SAAAc,GAAC,OAT1C,SAACyC,GACjB7F,EAAY6F,GACZxC,EAAE,cAAcC,YAAY,UAOkCtC,CAAY6E,KAC1D9D,EAAAC,EAAAC,cAAA,YAAO4D,EAAOC,YACd/D,EAAAC,EAAAC,cAAA,UAAK4D,EAAO3E,WAEhB,yBCZd6E,6MAOFC,iBAAmB,SAAA5C,GACfzC,EAAKsF,MAAuB,gBAAftF,EAAKsF,MAA0B,kBAAoB,cAChE5C,EAAE,WAAW6C,SAAS,mBAAmBC,KAAKxF,EAAKsF,OACnD5C,EAAE,gBAAgB+C,iBAGtBC,aAAe,SAAC3F,GAAM,IAAAO,EACON,EAAKC,MAAtB+B,EADU1B,EACV0B,OAAQI,EADE9B,EACF8B,KAChBJ,EAAOC,KAAK,aAAcG,GAC1BpC,EAAKC,MAAMW,QAAQyB,KAAK,QAG5BsD,kBAAoB,SAAAlD,GAChBzC,EAAKC,MAAMZ,YAAY,IACvBqD,EAAE,cAAcC,YAAY,8FAlB5B1B,KAAKqE,MAAQ,cACb5C,EAAE,gBAAgB+C,+CAoBb,IAAApB,EACyBpD,KAAKhB,MAA3BmC,EADHiC,EACGjC,KAAM6C,EADTZ,EACSY,YACd,OACI7D,EAAAC,EAAAC,cAAA,WAASC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UAAQK,QAASV,KAAKyE,aAAcnE,UAAU,SAAQH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,UACtDH,EAAAC,EAAAC,cAAA,UAAQK,QAAS,SAAAc,GAAOC,EAAE,cAAcC,YAAY,WAAcpB,UAAU,eAAcH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,UAE9FH,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACfH,EAAAC,EAAAC,cAAA,YAAOc,EAAK+C,YACZ/D,EAAAC,EAAAC,cAAA,UAAKc,EAAK7B,WAEda,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OAAOI,QAASV,KAAK0E,mBAAvC,UAAiEvE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,gBACjEH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcI,QAASV,KAAKoE,kBAA9C,UAAuEjE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,gBACvEH,EAAAC,EAAAC,cAACsE,EAAD,CAAYX,YAAaA,EAAa7C,KAAMA,aAvCzCR,aAiERiE,EALCC,YACZC,IACAlE,YAhBoB,SAACC,GACrB,MAAO,CACHM,KAAMN,EAAMM,KACZ6C,YAAanD,EAAMmD,YACnBjD,OAAQF,EAAME,SAIK,SAACzC,GACxB,MAAO,CACHF,YAAa,SAAC+C,GAAW7C,EAASF,EAAY+C,QASvCyD,CAAQT,GCnEjBY,cACF,SAAAA,EAAY/F,GAAO,IAAAD,EAAA,OAAAiG,OAAAC,EAAA,EAAAD,CAAAhF,KAAA+E,QAEkBG,KADjCnG,EAAAiG,OAAAG,EAAA,EAAAH,CAAAhF,KAAAgF,OAAAI,EAAA,EAAAJ,CAAAD,GAAAM,KAAArF,KAAMhB,KACGA,MAAMmC,KAAK7B,UAChBP,EAAKC,MAAMW,QAAQyB,KAAK,KAHbrC,sFAQfuG,cAActF,KAAKgD,wCAKnB,OADA/C,SAASC,MAAT,aAAAmB,OAA8BrB,KAAKhB,MAAMmC,KAAK7B,UAE1Ca,EAAAC,EAAAC,cAACkF,EAAA,SAAD,KACIpF,EAAAC,EAAAC,cAAA,WAASC,UAAU,kBACfH,EAAAC,EAAAC,cAACmF,EAAD,MACArF,EAAAC,EAAAC,cAAA,WAASC,UAAU,gBACfH,EAAAC,EAAAC,cAACoF,EAAD,MACAtF,EAAAC,EAAAC,cAACqF,EAAD,gBApBE/E,aAmCXC,cAPS,SAACC,GACrB,MAAO,CACHM,KAAMN,EAAMM,KACZJ,OAAQF,EAAME,SAIPH,CAAyBmE,GChClCY,8LAEgB,IAAAtG,EACiDW,KAAKhB,MAAhE4G,EADUvG,EACVuG,UAAWC,EADDxG,EACCwG,UAAWpH,EADZY,EACYZ,YAAaqH,EADzBzG,EACyByG,UAAWC,EADpC1G,EACoC0G,SAChDhF,EAASiF,IAAGJ,GAClBC,EAAU9E,GACVA,EAAOkF,GAAG,UAAW,SAAAzE,GAEnBT,EAAOkF,GAAGnI,iBAAgB,SAACoE,GACzBzD,EAAY,SAAUyD,KAGxBnB,EAAOkF,GAAGjI,kBAAiB,SAACkI,GAC1BC,QAAQC,IAAIF,GACZzH,EAAYyH,EAAIxH,KAAMwH,EAAIvH,QAG5BoC,EAAOkF,GAAGvI,gBAAe,SAAC4B,GACxBwG,EAAUxG,EAAW,cACrB+G,WAAW,SAAA7E,GAAOsE,EAAU,KAAO,OAGrC/E,EAAOkF,GAAGhI,gBAAe,SAAC+F,GACxBmC,QAAQC,IAAIpC,EAAYsC,QACxBP,EAAS/B,wCAOb,OACE7D,EAAAC,EAAAC,cAAA,WAASC,UAAU,OACjBH,EAAAC,EAAAC,cAACkG,EAAA,EAAD,KACEpG,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW/H,IACjCuB,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAOC,KAAK,aAAaE,UAAW5B,aAnC5BpE,aAyDHC,cAfS,SAACC,EAAO+F,GAC9B,MAAO,CACLhB,UAAW/E,EAAM+E,YAIM,SAACtH,GAC1B,MAAO,CACLuH,UAAW,SAAAxH,GAASC,EPzDC,SAAAD,GACrB,OAAO,SAAAC,GACHA,EAAS,CAAEE,KAAMpB,aAAYiB,IAAKA,KOuDTwH,CAAUxH,KACvCI,YAAa,SAACC,EAAMC,GAAWL,EAASG,EAAYC,EAAMC,KAC1DmH,UAAW,SAACzH,GAAUC,EPzCD,SAAAD,GACrB,OAAO,SAAAC,GACHA,EAAS,CAAEE,KAAMb,aAAYU,IAAKA,KOuCPyH,CAAUzH,KACzC0H,SAAU,SAAA1H,GAASC,EP9BC,SAAAD,GACpB,OAAO,SAACC,EAAUC,GACdD,EAAS,CAAEE,KAAMN,eAAcG,IAAKA,KO4BZ0H,CAAS1H,OAI1BuC,CAA6C+E,GCtDxCkB,QACW,cAA7B/E,OAAOgF,SAASC,UAEe,UAA7BjF,OAAOgF,SAASC,UAEhBjF,OAAOgF,SAASC,SAASC,MACvB,wGChBAC,EAAY,CAEdrB,UAAW,IACX7E,OAAQ,KACRzB,SAAU,GACV4C,QAAS,GACToB,OAAQ,GACRvD,MAAO,GACPoB,KAAM,GACNI,SAAU,GACV8B,SAAU,CACN6D,OAAQ,IAEZlD,YAAa,IA6EFmD,EA1EK,WAA+B,IAA9BtG,EAA8BuG,UAAAd,OAAA,QAAApB,IAAAkC,UAAA,GAAAA,UAAA,GAAtBH,EAAWI,EAAWD,UAAAd,OAAA,EAAAc,UAAA,QAAAlC,EAC/C,OAAQmC,EAAO7I,MAEX,KAAKpB,aACD,OAAO4H,OAAAsC,EAAA,EAAAtC,CAAA,GACAnE,EADP,CAEIE,OAAQsG,EAAOhJ,MAGvB,KAAKhB,eACD,OAAO2H,OAAAsC,EAAA,EAAAtC,CAAA,GACAnE,EADP,CAEIvB,SAAU+H,EAAOhJ,MAGzB,KAAKV,aACD,OAAOqH,OAAAsC,EAAA,EAAAtC,CAAA,GACAnE,EADP,CAEIyC,OAAQ+D,EAAOhJ,MAGvB,KAAKb,cACD,OAAOwH,OAAAsC,EAAA,EAAAtC,CAAA,GACAnE,EADP,CAEIM,KAAMkG,EAAOhJ,IACb0B,MAAO,KAGf,KAAKxC,YACD,OAAOyH,OAAAsC,EAAA,EAAAtC,CAAA,GACAnE,EADP,CAEId,MAAOsH,EAAOhJ,MAGtB,KAAKT,cACD,OAAOoH,OAAAsC,EAAA,EAAAtC,CAAA,GACAnE,EADP,CAEIqB,QAASmF,EAAOhJ,MAGxB,KAAKR,eACD,OAAOmH,OAAAsC,EAAA,EAAAtC,CAAA,GACAnE,EADP,CAEIwC,SAAS2B,OAAAsC,EAAA,EAAAtC,CAAA,GACFnE,EAAMwC,SADL2B,OAAAuC,EAAA,EAAAvC,CAAA,GAEHqC,EAAOhJ,IAAIK,KAAOmC,EAAMwC,SAASgE,EAAOhJ,IAAIK,MAA1B,GAAA2C,OAAA2D,OAAAwC,EAAA,EAAAxC,CACXnE,EAAMwC,SAASgE,EAAOhJ,IAAIK,OADf,CACsB2I,EAAOhJ,IAAIM,OAChD,CAAC0I,EAAOhJ,IAAIM,UAQ5B,KAAKT,eACD,OAAO8G,OAAAsC,EAAA,EAAAtC,CAAA,GACAnE,EADP,CAEImD,YAAaqD,EAAOhJ,MAG5B,KAAKF,YACD,OAAO6G,OAAAsC,EAAA,EAAAtC,CAAA,GACAnE,EADP,CAEIU,SAAU8F,EAAOhJ,MAGzB,QACI,OAAO2G,OAAAsC,EAAA,EAAAtC,CAAA,GACAnE,KC5Eb4G,EAAQC,YAAYP,EAAaQ,YAAgBC,MAEvDC,IAASC,OACL3H,EAAAC,EAAAC,cAAC0H,EAAA,EAAD,CAAUN,MAAOA,GACbtH,EAAAC,EAAAC,cAAC2H,EAAA,EAAD,KACI7H,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAOC,KAAK,IAAIE,UAAWhB,MAGjC1F,SAASgI,eAAe,SF8GxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7e1b14f3.chunk.js","sourcesContent":["module.exports = {\r\n    SET_SOCKET: 'SET_SOCKET',\r\n    SET_NICKNAME: 'SET_NICKNAME',\r\n    VERIFIY_USER: 'VERIFIY_USER',\r\n    SET_ERROR: 'SET_ERROR',\r\n    CREATE_USER: 'CREATE_USER',\r\n    TYPING: 'TYPING',\r\n    RECIVE_TYPING: 'RECIVE_TYPING',\r\n    SET_TYPING: 'SET_TYPING',\r\n    SET_MESSAGE: 'SET_MESSAGE',\r\n    SEND_MESSAGE: 'SEND_MESSAGE',\r\n    RECIVE_MESSAGE: 'RECIVE_MESSAGE',\r\n    SEND_PMESSAGE: 'SEND_PMESSAGE',\r\n    RECIVE_PMESSAGE: 'RECIVE_PMESSAGE',\r\n    RECIVE_ONLINE: 'RECIVE_ONLINE',\r\n    UPDATE_USERS: 'UPDATE_USERS',\r\n    CHAT_WITH: 'CHAT_WITH'\r\n}","import { SET_SOCKET, CHAT_WITH, UPDATE_USERS, CREATE_USER, SET_ERROR, SET_NICKNAME, VERIFIY_USER, SEND_MESSAGE, SET_MESSAGE, SET_TYPING } from \"../../CONSTANTS\";\r\n\r\nexport const setSocket = val => {\r\n    return dispatch => {\r\n        dispatch({ type: SET_SOCKET, val: val });\r\n    }\r\n}\r\n\r\nexport const setNickname = val => {\r\n    return dispatch => {\r\n        dispatch({ type: SET_NICKNAME, val: val });\r\n    }\r\n}\r\n\r\nexport const setMessage = val => {\r\n    return dispatch => {\r\n        dispatch({ type: SET_MESSAGE, val: val });\r\n    }\r\n}\r\n\r\nexport const setTyping = val => {\r\n    return dispatch => {\r\n        dispatch({ type: SET_TYPING, val: val });\r\n    }\r\n}\r\n\r\nexport const setError = val => {\r\n    return dispatch => {\r\n        dispatch({ type: SET_ERROR, val: val });\r\n    }\r\n}\r\n\r\nexport const setUsers = val => {\r\n    return (dispatch, getState) => {\r\n        dispatch({ type: UPDATE_USERS, val: val })\r\n    }\r\n}\r\n\r\nexport const setChatWith = val => {\r\n    return (dispatch, getState) => {\r\n        dispatch({ type: CHAT_WITH, val: val })\r\n    }\r\n}\r\n\r\nexport const verifiyUser = val => {\r\n    return (dispatch, getState) => {\r\n        const { nickname, socket } = getState();\r\n        socket.emit(VERIFIY_USER, nickname, (res) => {\r\n            if (res.isUser) {\r\n                dispatch({ type: SET_ERROR, val: 'nickname not available' });\r\n            } else {\r\n                socket.emit(CREATE_USER, res.user);\r\n                dispatch({ type: CREATE_USER, val: res.user });\r\n                val.push(`/${res.user.nickname}`);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const sendMessage = (dest, cont) => {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: SEND_MESSAGE, val: {\r\n                dest: dest,\r\n                cont: cont\r\n            }\r\n        });\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { verifiyUser, setNickname, setError } from '../store/actions/actions';\r\n\r\nclass Login extends Component {\r\n\r\n    handleChange = (e) => {\r\n        this.props.setNickname(e.target.value);\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        const { nickname, setError, verifiyUser } = this.props;\r\n        if (this.userPattern.test(nickname)) {\r\n            verifiyUser(this.props.history)\r\n        }\r\n        else {\r\n            setError('nickname must be min 3 chars and max 10');\r\n        }\r\n    }\r\n\r\n    handleKeyPress = e => {\r\n        if (e.charCode === 13) {\r\n            e.preventDefault();\r\n            this.handleClick(e);\r\n        }\r\n    }\r\n\r\n    userPattern = /^[A-Za-z0-9_]{3,10}$/\r\n\r\n    render() {\r\n        const { error } = this.props;\r\n        document.title = `Chatter`;\r\n        return (\r\n            <article className=\"login-container\">\r\n                <section className=\"login-content\">\r\n                    <h1 className=\"title\">got a nickname ?</h1>\r\n                    <div>\r\n                        <input\r\n                            type=\"text\"\r\n                            onChange={this.handleChange}\r\n                            onKeyPress={this.handleKeyPress}\r\n                            placeholder=\"Enter nickname...\" />\r\n                        <p>{error}</p>\r\n                    </div>\r\n                    <button onClick={this.handleClick} className=\"btn btn-primary\">Log in</button>\r\n                </section>\r\n            </article>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        nickname: state.nickname,\r\n        error: state.error,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setNickname: (nickname) => { dispatch(setNickname(nickname)) },\r\n        verifiyUser: (nickname) => { dispatch(verifiyUser(nickname)) },\r\n        setError: (error) => { dispatch(setError(error)) }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)","import React, { Component } from 'react'\r\nimport './Styling.scss'\r\nimport * as $ from 'jquery'\r\nimport { connect } from 'react-redux'\r\n\r\nclass Navbar extends Component {\r\n\r\n    render() {\r\n        const { chatWith } = this.props\r\n        return (\r\n            <nav className=\"page-navbar\">\r\n                <button onClick={_ => { $('.main-menu').toggleClass('active'); }} className=\"menu-opener\"><i className=\"material-icons\">menu</i></button>\r\n                <h1 className=\"page-title\">{\r\n                    chatWith.nickname ? (chatWith.nickname) : 'Chatter'\r\n                }</h1>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        chatWith: state.chatWith\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navbar)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as $ from 'jquery'\r\nimport autosize from 'autosize';\r\nimport { sendMessage, setMessage } from '../store/actions/actions';\r\nimport { SEND_MESSAGE, TYPING, SEND_PMESSAGE } from '../CONSTANTS';\r\nimport moment from 'moment';\r\n\r\nclass MessageContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        this.inter = setInterval(_ => {\r\n            this.jMethods();\r\n        }, 1000);\r\n        autosize(this.messagearea);\r\n    }\r\n\r\n    jMethods = _ => {\r\n        let screenHeight = $(window).innerHeight();\r\n        let navbarHeight = $('.page-navbar').innerHeight();\r\n        let requiredHeight = screenHeight - navbarHeight;\r\n        $('.message-container').height(requiredHeight);\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.props.setMessage(e.target.value)\r\n        this.props.socket.emit(TYPING, this.props.user.nickname);\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        const { user, socket, sendMessage, message, chatWith } = this.props;\r\n        let messageTemplate = {\r\n            sender: user.nickname,\r\n            date: moment(new Date().toString()).format('D/MMM - hh:mm a'),\r\n            content: message\r\n        }\r\n        chatWith.socketID ? socket.emit(SEND_PMESSAGE, { reciver: chatWith.socketID, content: messageTemplate })\r\n            : socket.emit(SEND_MESSAGE, messageTemplate);\r\n        let dest = chatWith.nickname ? chatWith.nickname : 'global';\r\n        sendMessage(dest, messageTemplate);\r\n        this.messagearea.value = '';\r\n        this.messagearea.focus();\r\n    }\r\n\r\n    handleKeyPress = (e) => {\r\n        if (e.charCode === 13) {\r\n            e.preventDefault();\r\n            this.handleClick(e);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { messages, user, typing, chatWith } = this.props;\r\n        let messageArray = chatWith.nickname ? messages[chatWith.nickname] : messages['global'];\r\n        // console.log(messageArray);\r\n        return (\r\n            <article className=\"message-container\">\r\n                <section className=\"message-area\">\r\n                    {\r\n                        messageArray ? (\r\n                            messageArray.map((message, index) => {\r\n                                return (\r\n                                    <div key={index} className={`message ${message.sender === user.nickname ? 'right' : ''}`}>\r\n                                        <h2 className=\"message-sender\">{message.sender}</h2>\r\n                                        <p className=\"message-content\">{message.content}</p>\r\n                                        <span className=\"message-time\">{message.date}</span>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        ) : null\r\n                    }\r\n                </section>\r\n                <section className=\"person-typing\">{chatWith.nickname ? null : typing}</section>\r\n                <section className=\"message-typing\">\r\n                    <textarea\r\n                        placeholder=\"Enter message...\"\r\n                        onChange={this.handleChange}\r\n                        onKeyPress={this.handleKeyPress}\r\n                        ref={i => this.messagearea = i}\r\n                        rows=\"1\" dir=\"auto\"></textarea>\r\n                    <button className=\"btn btn-primary\" onClick={this.handleClick}><i className=\"material-icons\">send</i></button>\r\n                </section>\r\n            </article>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.messages,\r\n        user: state.user,\r\n        message: state.message,\r\n        socket: state.socket,\r\n        typing: state.typing,\r\n        chatWith: state.chatWith,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (dest, content) => { dispatch(sendMessage(dest, content)) },\r\n        setMessage: (val) => { dispatch(setMessage(val)) }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageContainer)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { setChatWith } from '../store/actions/actions';\r\nimport * as $ from 'jquery'\r\n\r\nconst FriendList = ({ onlineUsers, user, setChatWith }) => {\r\n\r\n    const handleClick = (friend) => {\r\n        setChatWith(friend);\r\n        $('.main-menu').toggleClass('active');\r\n    }\r\n\r\n    return (\r\n        <section className=\"friend-list\">\r\n            {onlineUsers.map((friend, index) => {\r\n                return user.nickname !== friend.nickname ? (\r\n                    <div key={index} className=\"friend\" onClick={_ => handleClick(friend)}>\r\n                        <span>{friend.userLetter}</span>\r\n                        <h3>{friend.nickname}</h3>\r\n                    </div>\r\n                ) : ''\r\n            })\r\n            }\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setChatWith: (user) => { dispatch(setChatWith(user)) },\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(FriendList)\r\n","import React, { Component } from 'react'\r\nimport * as $ from 'jquery'\r\nimport { connect } from 'react-redux'\r\nimport FriendList from './FriendList';\r\nimport { withRouter } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\nimport { setChatWith } from '../store/actions/actions';\r\n\r\nclass SideMenu extends Component {\r\n\r\n    componentDidMount() {\r\n        this.arrow = 'arrow_right'\r\n        $('.friend-list').slideToggle();\r\n    }\r\n\r\n    handleShowOnline = _ => {\r\n        this.arrow = this.arrow === 'arrow_right' ? 'arrow_drop_down' : 'arrow_right';\r\n        $('.online').children('.material-icons').text(this.arrow);\r\n        $('.friend-list').slideToggle();\r\n    }\r\n\r\n    handleLogout = (e) => {\r\n        const { socket, user } = this.props;\r\n        socket.emit('disconnect', user);\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    handleGlobalClick = _ => {\r\n        this.props.setChatWith({});\r\n        $('.main-menu').toggleClass('active');\r\n    }\r\n\r\n    render() {\r\n        const { user, onlineUsers } = this.props;\r\n        return (\r\n            <article className=\"main-menu\">\r\n                <nav className=\"sidemenu-nav\">\r\n                    <button onClick={this.handleLogout} className=\"logof\"><i className=\"material-icons\">eject</i></button>\r\n                    <button onClick={_ => { $('.main-menu').toggleClass('active'); }} className=\"menu-opener\"><i className=\"material-icons\">menu</i></button>\r\n                </nav>\r\n                <section className=\"profile\">\r\n                    <span>{user.userLetter}</span>\r\n                    <h2>{user.nickname}</h2>\r\n                </section>\r\n                <section className=\"chat-types\">\r\n                    <button className=\"type\" onClick={this.handleGlobalClick}>global <i className=\"material-icons\">arrow_right</i></button>\r\n                    <button className=\"type online\" onClick={this.handleShowOnline}>online <i className=\"material-icons\">arrow_right</i></button>\r\n                    <FriendList onlineUsers={onlineUsers} user={user} />\r\n                </section>\r\n            </article>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user,\r\n        onlineUsers: state.onlineUsers,\r\n        socket: state.socket\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setChatWith: (user) => { dispatch(setChatWith(user)) },\r\n    }\r\n}\r\n\r\nconst enhance = compose(\r\n    withRouter,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)\r\n\r\nexport default enhance(SideMenu)","import React, { Component, Fragment } from 'react'\r\nimport Navbar from './Navbar';\r\nimport { connect } from 'react-redux'\r\nimport MessageContainer from './MessageContainer';\r\nimport SideMenu from './SideMenu';\r\n\r\nclass MessageArea extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        if (this.props.user.nickname === undefined) {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.inter);\r\n    }\r\n\r\n    render() {\r\n        document.title = `Chatter | ${this.props.user.nickname}`\r\n        return (\r\n            <Fragment>\r\n                <article className=\"main-container\">\r\n                    <SideMenu />\r\n                    <section className=\"main-content\">\r\n                        <Navbar />\r\n                        <MessageContainer />\r\n                    </section>\r\n                </article>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user,\r\n        socket: state.socket\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MessageArea)","import React, { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { connect } from 'react-redux';\r\nimport { setSocket, setTyping, sendMessage, setUsers } from './store/actions/actions'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport Login from './components/Login';\r\nimport MessageArea from './components/MessageArea'\r\nimport { RECIVE_MESSAGE, RECIVE_TYPING, RECIVE_ONLINE, RECIVE_PMESSAGE } from './CONSTANTS';\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    const { socketURL, setSocket, sendMessage, setTyping, setUsers } = this.props;\r\n    const socket = io(socketURL);\r\n    setSocket(socket);\r\n    socket.on('connect', _ => {\r\n\r\n      socket.on(RECIVE_MESSAGE, (message) => {\r\n        sendMessage('global', message)\r\n      });\r\n\r\n      socket.on(RECIVE_PMESSAGE, (msg) => {\r\n        console.log(msg);\r\n        sendMessage(msg.dest, msg.cont)\r\n      });\r\n\r\n      socket.on(RECIVE_TYPING, (nickname) => {\r\n        setTyping(nickname + ' is typing');\r\n        setTimeout(_ => { setTyping('') }, 3000)\r\n      });\r\n\r\n      socket.on(RECIVE_ONLINE, (onlineUsers) => {\r\n        console.log(onlineUsers.length);\r\n        setUsers(onlineUsers)\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <article className=\"App\">\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Login}></Route>\r\n          <Route path=\"/:nickname\" component={MessageArea}></Route>\r\n        </Switch>\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    socketURL: state.socketURL\r\n  }\r\n}\r\n\r\nconst mapStateToDispatch = (dispatch) => {\r\n  return {\r\n    setSocket: val => { dispatch(setSocket(val)) },\r\n    sendMessage: (dest, cont) => { dispatch(sendMessage(dest, cont)) },\r\n    setTyping: (val) => { dispatch(setTyping(val)) },\r\n    setUsers: val => { dispatch(setUsers(val)) }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapStateToDispatch)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CREATE_USER, SET_SOCKET, SET_ERROR, SET_NICKNAME, SEND_MESSAGE, SET_MESSAGE, SET_TYPING, UPDATE_USERS, CHAT_WITH } from \"../../CONSTANTS\";\r\n\r\nconst initState = {\r\n    // socketURL: window.location.hostname === 'localhost' ? 'http://localhost:8080' : 'http://192.168.1.8:8080',\r\n    socketURL: '/',\r\n    socket: null,\r\n    nickname: '',\r\n    message: '',\r\n    typing: '',\r\n    error: '',\r\n    user: {},\r\n    chatWith: {},\r\n    messages: {\r\n        global: []\r\n    },\r\n    onlineUsers: []\r\n};\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n\r\n        case SET_SOCKET:\r\n            return {\r\n                ...state,\r\n                socket: action.val\r\n            }\r\n\r\n        case SET_NICKNAME:\r\n            return {\r\n                ...state,\r\n                nickname: action.val\r\n            }\r\n\r\n        case SET_TYPING:\r\n            return {\r\n                ...state,\r\n                typing: action.val\r\n            }\r\n\r\n        case CREATE_USER:\r\n            return {\r\n                ...state,\r\n                user: action.val,\r\n                error: ''\r\n            }\r\n\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.val\r\n            }\r\n\r\n        case SET_MESSAGE:\r\n            return {\r\n                ...state,\r\n                message: action.val\r\n            }\r\n\r\n        case SEND_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: {\r\n                    ...state.messages,\r\n                    [action.val.dest]: state.messages[action.val.dest] ?\r\n                        [...state.messages[action.val.dest], action.val.cont] :\r\n                        [action.val.cont]\r\n                }\r\n                // messages: [\r\n                //     ...state.messages,\r\n                //     action.val\r\n                // ]\r\n            }\r\n\r\n        case UPDATE_USERS:\r\n            return {\r\n                ...state,\r\n                onlineUsers: action.val\r\n            }\r\n\r\n        case CHAT_WITH:\r\n            return {\r\n                ...state,\r\n                chatWith: action.val\r\n            }\r\n\r\n        default:\r\n            return {\r\n                ...state\r\n            }\r\n    }\r\n}\r\n\r\nexport default rootReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './store/reducers/rootReducer';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <Provider store={store} >\r\n        <BrowserRouter>\r\n            <Route path=\"/\" component={App}></Route>\r\n        </BrowserRouter>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}