{"version":3,"sources":["store/actions/actions.js","components/Login.js","components/Navbar.js","components/MessageContainer.js","components/FriendList.js","components/SideMenu.js","components/MessageArea.js","App.js","serviceWorker.js","store/reducers/rootReducer.js","index.js","CONSTANTS.js","assets/sound.ogg"],"names":["setChatWith","val","dispatch","getState","type","CHAT_WITH","sendMessage","dest","cont","SEND_MESSAGE","Login","handleChange","e","_this","props","setNickname","target","value","handleClick","_this$props","verifiyUser","nickname","setError","newNick","replace","length","input","focus","history","handleKeyPress","charCode","preventDefault","_this2","this","error","react_default","a","createElement","className","onChange","onKeyPress","placeholder","maxLength","ref","i","onClick","Component","connect","state","SET_NICKNAME","_getState","socket","emit","VERIFIY_USER","res","isUser","SET_ERROR","CREATE_USER","user","push","concat","Navbar","chatWith","_","$","toggleClass","MessageContainer","setMessage","TYPING","containsObject","obj","list","message","onlineUsers","sound","newMessage","trim","messageTemplate","sender","date","moment","format","content","socketID","SEND_PMESSAGE","reciver","deletedUser","condition","messagearea","disabled","setTimeout","Audio","notification","play","animate","scrollTop","scrollHeight","height","autosize","_this$props2","messages","typing","messageArray","react_transition_group","map","index","timeout","key","classNames","dir","split","rows","SET_MESSAGE","_ref","friend","userLetter","SideMenu","handleShowOnline","arrow","children","text","slideToggle","handleLogout","disconnect","window","location","href","handleGlobalClick","components_FriendList","enhance","compose","withRouter","MessageArea","Object","classCallCheck","undefined","possibleConstructorReturn","getPrototypeOf","call","clearInterval","inter","title","document","react","components_SideMenu","components_Navbar","components_MessageContainer","App","recivingMsg","vibration","navigator","vibrate","socketURL","setSocket","setTyping","setUsers","io","on","RECIVE_MESSAGE","msg","RECIVE_PMESSAGE","RECIVE_TYPING","RECIVE_ONLINE","console","log","Route","render","Switch","path","exact","component","ownProps","SET_SOCKET","SET_TYPING","UPDATE_USERS","Boolean","hostname","match","initState","global","rootReducer","arguments","action","objectSpread","SET_VIBRATION","SET_SOUND","defineProperty","toConsumableArray","store","createStore","applyMiddleware","thunk","ReactDOM","es","BrowserRouter","in","appear","getElementById","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.aecb2d48.chunk.js","sourcesContent":["import {\r\n    SET_SOCKET,\r\n    CHAT_WITH,\r\n    UPDATE_USERS,\r\n    CREATE_USER,\r\n    SET_ERROR,\r\n    SET_NICKNAME,\r\n    VERIFIY_USER,\r\n    SEND_MESSAGE,\r\n    SET_MESSAGE,\r\n    SET_TYPING,\r\n    SET_SOUND,\r\n    SET_VIBRATION\r\n} from \"../../CONSTANTS\";\r\n\r\n\r\nexport const setSocket = val => {\r\n    return dispatch => {\r\n        dispatch({ type: SET_SOCKET, val: val });\r\n    }\r\n}\r\n\r\nexport const setVibration = val => {\r\n    return dispatch => {\r\n        dispatch({ type: SET_VIBRATION, val: val });\r\n    }\r\n}\r\n\r\nexport const setSound = val => {\r\n    return dispatch => {\r\n        dispatch({ type: SET_SOUND, val: val });\r\n    }\r\n}\r\n\r\nexport const setNickname = val => {\r\n    return dispatch => {\r\n        dispatch({ type: SET_NICKNAME, val: val });\r\n    }\r\n}\r\n\r\nexport const setMessage = val => {\r\n    return dispatch => {\r\n        dispatch({ type: SET_MESSAGE, val: val });\r\n    }\r\n}\r\n\r\nexport const setTyping = val => {\r\n    return dispatch => {\r\n        dispatch({ type: SET_TYPING, val: val });\r\n    }\r\n}\r\n\r\nexport const setError = val => {\r\n    return dispatch => {\r\n        dispatch({ type: SET_ERROR, val: val });\r\n    }\r\n}\r\n\r\nexport const setUsers = val => {\r\n    return (dispatch, getState) => {\r\n        dispatch({ type: UPDATE_USERS, val: val })\r\n    }\r\n}\r\n\r\nexport const setChatWith = val => {\r\n    return (dispatch, getState) => {\r\n        dispatch({ type: CHAT_WITH, val: val })\r\n    }\r\n}\r\n\r\nexport const verifiyUser = val => {\r\n    return (dispatch, getState) => {\r\n        const { nickname, socket } = getState();\r\n        socket.emit(VERIFIY_USER, nickname, (res) => {\r\n            if (res.isUser) {\r\n                dispatch({ type: SET_ERROR, val: 'nickname not available' });\r\n            } else {\r\n                socket.emit(CREATE_USER, res.user);\r\n                dispatch({ type: CREATE_USER, val: res.user });\r\n                val.push(`/${res.user.nickname}`);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const sendMessage = (dest, cont) => {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: SEND_MESSAGE, val: {\r\n                dest: dest,\r\n                cont: cont\r\n            }\r\n        });\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { verifiyUser, setNickname, setError } from '../store/actions/actions';\r\n\r\nclass Login extends Component {\r\n\r\n    handleChange = (e) => {\r\n        this.props.setNickname(e.target.value);\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        const { verifiyUser, nickname, setError, setNickname } = this.props;\r\n        let newNick = nickname.replace(/\\s/g, '');\r\n        if (newNick.length <= 0) {\r\n            setError('nickname is required');\r\n            this.input.focus();\r\n        } else {\r\n            if (newNick.length >= 3) {\r\n                setNickname(newNick);\r\n                verifiyUser(this.props.history);\r\n            } else {\r\n                setError('nickname must be min 3 chars');\r\n                this.input.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    handleKeyPress = e => {\r\n        if (e.charCode === 13) {\r\n            e.preventDefault();\r\n            this.handleClick(e);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { error } = this.props;\r\n        return (\r\n            <article className=\"login-container\">\r\n                <section className=\"login-content\">\r\n                    <h1 className=\"title\">got a nickname ?</h1>\r\n                    <div>\r\n                        <input\r\n                            type=\"text\"\r\n                            onChange={this.handleChange}\r\n                            onKeyPress={this.handleKeyPress}\r\n                            placeholder=\"Enter nickname...\"\r\n                            maxLength=\"10\"\r\n                            ref={i => this.input = i}\r\n                        />\r\n                        <p>{error}</p>\r\n                    </div>\r\n                    <button onClick={this.handleClick} className=\"btn btn-primary\">Log in</button>\r\n                </section>\r\n            </article>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        nickname: state.nickname,\r\n        error: state.error,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setNickname: (nickname) => { dispatch(setNickname(nickname)) },\r\n        verifiyUser: (nickname) => { dispatch(verifiyUser(nickname)) },\r\n        setError: (error) => { dispatch(setError(error)) }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)","import React, { Component } from 'react'\r\nimport './Styling.scss'\r\nimport * as $ from 'jquery'\r\nimport { connect } from 'react-redux'\r\n\r\nclass Navbar extends Component {\r\n\r\n    render() {\r\n        const { chatWith } = this.props\r\n        return (\r\n            <nav className=\"page-navbar\">\r\n                <button onClick={_ => { $('.main-menu').toggleClass('active'); }} className=\"menu-opener\"><i className=\"material-icons\">menu</i></button>\r\n                <h1 className=\"page-title\">{\r\n                    chatWith.nickname ? (chatWith.nickname) : 'Chatter'\r\n                }</h1>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        chatWith: state.chatWith\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navbar)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as $ from 'jquery'\r\nimport autosize from 'autosize';\r\nimport { sendMessage, setMessage, setChatWith } from '../store/actions/actions';\r\nimport { SEND_MESSAGE, TYPING, SEND_PMESSAGE } from '../CONSTANTS';\r\nimport moment from 'moment';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport notification from '../assets/sound.ogg'\r\n\r\nclass MessageContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        autosize(this.messagearea);\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.props.setMessage(e.target.value)\r\n        this.props.socket.emit(TYPING, this.props.user.nickname);\r\n    }\r\n\r\n    containsObject = (obj, list) => {\r\n        for (let i = 0; i < list.length; i++) {\r\n            if (list[i] === obj) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        const { user, socket, sendMessage, message, chatWith, setMessage, onlineUsers, setChatWith, sound } = this.props;\r\n        let dest,\r\n            newMessage = message.trim(),\r\n            messageTemplate = {\r\n                sender: user.nickname,\r\n                date: moment().format('D/MMM - hh:mm a'),\r\n                content: newMessage\r\n            };\r\n        if (newMessage !== '') {\r\n            if (chatWith.socketID) {\r\n                if (this.containsObject(chatWith, onlineUsers)) {\r\n                    dest = chatWith.nickname;\r\n                    socket.emit(SEND_PMESSAGE, { reciver: chatWith.socketID, content: messageTemplate });\r\n                    sendMessage(dest, messageTemplate);\r\n                } else {\r\n                    this.deletedUser = {\r\n                        nickname: chatWith.nickname,\r\n                        condition: true\r\n                    }\r\n                    this.messagearea.disabled = true;\r\n                    setTimeout(_ => {\r\n                        this.deletedUser.condition = false;\r\n                        this.messagearea.disabled = false;\r\n                        setChatWith({});\r\n                    }, 3000)\r\n                }\r\n\r\n            } else {\r\n                dest = 'global';\r\n                socket.emit(SEND_MESSAGE, messageTemplate);\r\n                sendMessage(dest, messageTemplate);\r\n            }\r\n            setMessage('');\r\n            this.messagearea.focus();\r\n            if (sound === true) {\r\n                new Audio(notification).play()\r\n            }\r\n            $('.message-area').animate({\r\n                scrollTop: $('.message-area')[0].scrollHeight\r\n            }, 500);\r\n            $('textarea').height('32px');\r\n        } else {\r\n            setMessage('');\r\n            this.messagearea.focus();\r\n        }\r\n    }\r\n\r\n    handleKeyPress = (e) => {\r\n        if (e.charCode === 13) {\r\n            e.preventDefault();\r\n            this.handleClick(e);\r\n        }\r\n    }\r\n\r\n    deletedUser = {\r\n        nickname: '',\r\n        condition: false\r\n    }\r\n\r\n    render() {\r\n        const { messages, user, typing, chatWith, message } = this.props;\r\n        let messageArray = chatWith.nickname ? messages[chatWith.nickname] : messages['global'];\r\n        return (\r\n            <article className=\"message-container\">\r\n                <TransitionGroup className=\"message-area\">\r\n                    {\r\n                        messageArray ? (\r\n                            messageArray.map((message, index) => {\r\n                                return (\r\n                                    <CSSTransition\r\n                                        timeout={500}\r\n                                        key={index}\r\n                                        classNames=\"msg\">\r\n                                        <div key={index} className={`message ${message.sender === user.nickname ? 'right' : ''}`}>\r\n                                            <h2 className=\"message-sender\">{message.sender}</h2>\r\n                                            <p className=\"message-content\" dir=\"auto\">{message.content}</p>\r\n                                            <span className=\"message-time\">{message.date}</span>\r\n                                        </div>\r\n                                    </CSSTransition>\r\n                                )\r\n                            })\r\n                        ) : null\r\n                    }\r\n                    {\r\n                        this.deletedUser.condition === true ? <div className=\"deleted-user\">{this.deletedUser.nickname} is no longer available</div> : null\r\n                    }\r\n                </TransitionGroup>\r\n                <section className=\"person-typing\">{chatWith.nickname ? (\r\n                    typing.split(' ')[0] === chatWith.nickname ? typing : null\r\n                ) : typing}</section>\r\n                <section className=\"message-typing\">\r\n                    <textarea\r\n                        placeholder=\"Enter message...\"\r\n                        onChange={this.handleChange}\r\n                        onKeyPress={this.handleKeyPress}\r\n                        ref={i => this.messagearea = i}\r\n                        rows=\"1\" dir=\"auto\"\r\n                        value={message}></textarea>\r\n                    <button className=\"btn btn-primary\" onClick={this.handleClick}><i className=\"material-icons\">send</i></button>\r\n                </section>\r\n            </article>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.messages,\r\n        user: state.user,\r\n        message: state.message,\r\n        socket: state.socket,\r\n        typing: state.typing,\r\n        chatWith: state.chatWith,\r\n        onlineUsers: state.onlineUsers,\r\n        sound: state.sound\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (dest, content) => { dispatch(sendMessage(dest, content)) },\r\n        setMessage: (val) => { dispatch(setMessage(val)) },\r\n        setChatWith: (user) => { dispatch(setChatWith(user)) },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageContainer)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { setChatWith } from '../store/actions/actions';\r\nimport * as $ from 'jquery'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\n\r\nconst FriendList = ({ onlineUsers, user, setChatWith }) => {\r\n\r\n    const handleClick = (friend) => {\r\n        setChatWith(friend);\r\n        $('.main-menu').toggleClass('active');\r\n    }\r\n\r\n    return (\r\n        <TransitionGroup className=\"friend-list\">\r\n            {onlineUsers.map((friend, index) => {\r\n                return user.nickname !== friend.nickname ? (\r\n                    <CSSTransition\r\n                        key={index}\r\n                        timeout={1000}\r\n                        classNames='fade'>\r\n                        <div key={index} className=\"friend\" onClick={_ => handleClick(friend)}>\r\n                            <div>{friend.userLetter}</div>\r\n                            <div>{friend.nickname}</div>\r\n                        </div>\r\n                    </CSSTransition>\r\n                ) : ''\r\n            })\r\n            }\r\n        </TransitionGroup>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setChatWith: (user) => { dispatch(setChatWith(user)) },\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(FriendList)\r\n","import React, { Component } from 'react'\r\nimport * as $ from 'jquery'\r\nimport { connect } from 'react-redux'\r\nimport FriendList from './FriendList';\r\nimport { withRouter } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\nimport { setChatWith } from '../store/actions/actions';\r\n\r\nclass SideMenu extends Component {\r\n\r\n    componentDidMount() {\r\n        this.arrow = 'arrow_right'\r\n        $('.friend-list').slideToggle();\r\n    }\r\n\r\n    handleShowOnline = _ => {\r\n        this.arrow = this.arrow === 'arrow_right' ? 'arrow_drop_down' : 'arrow_right';\r\n        $('.online').children('.material-icons').text(this.arrow);\r\n        $('.friend-list').slideToggle();\r\n    }\r\n\r\n    handleLogout = (e) => {\r\n        const { socket } = this.props;\r\n        socket.disconnect();\r\n        window.location.href = '/';\r\n    }\r\n\r\n    handleGlobalClick = _ => {\r\n        this.props.setChatWith({});\r\n        $('.main-menu').toggleClass('active');\r\n    }\r\n\r\n    render() {\r\n        const { user, onlineUsers } = this.props;\r\n        return (\r\n            <article className=\"main-menu\">\r\n                <nav className=\"sidemenu-nav\">\r\n                    <button onClick={this.handleLogout} className=\"logof\"><i className=\"material-icons\">eject</i></button>\r\n                    <button onClick={_ => { $('.main-menu').toggleClass('active'); }} className=\"menu-opener\"><i className=\"material-icons\">menu</i></button>\r\n                </nav>\r\n                <section className=\"profile\">\r\n                    <span>{user.userLetter}</span>\r\n                    <h2>{user.nickname}</h2>\r\n                </section>\r\n                <section className=\"chat-types\">\r\n                    <button className=\"type\" onClick={this.handleGlobalClick}>global <i className=\"material-icons\">arrow_right</i></button>\r\n                    <button className=\"type online\" onClick={this.handleShowOnline}>online <i className=\"material-icons\">arrow_right</i></button>\r\n                    <FriendList onlineUsers={onlineUsers} user={user} />\r\n                </section>\r\n            </article>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user,\r\n        onlineUsers: state.onlineUsers,\r\n        socket: state.socket\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setChatWith: (user) => { dispatch(setChatWith(user)) },\r\n    }\r\n}\r\n\r\nconst enhance = compose(\r\n    withRouter,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)\r\n\r\nexport default enhance(SideMenu)","import React, { Component, Fragment } from 'react'\r\nimport Navbar from './Navbar';\r\nimport { connect } from 'react-redux'\r\nimport MessageContainer from './MessageContainer';\r\nimport SideMenu from './SideMenu';\r\n\r\nclass MessageArea extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        if (this.props.user.nickname === undefined) {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.inter);\r\n    }\r\n\r\n    render() {\r\n        let title = this.props.user.nickname ? `Chatter | ${this.props.user.nickname}` : `Chatter`;\r\n        document.title = title;\r\n        return (\r\n            <Fragment>\r\n                <article className=\"main-container\">\r\n                    <SideMenu />\r\n                    <section className=\"main-content\">\r\n                        <Navbar />\r\n                        <MessageContainer />\r\n                    </section>\r\n                </article>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user,\r\n        socket: state.socket\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MessageArea)","import React, { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { connect } from 'react-redux';\r\nimport { setSocket, setTyping, sendMessage, setUsers } from './store/actions/actions'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport Login from './components/Login';\r\nimport MessageArea from './components/MessageArea'\r\nimport { RECIVE_MESSAGE, RECIVE_TYPING, RECIVE_ONLINE, RECIVE_PMESSAGE } from './CONSTANTS';\r\nimport * as $ from 'jquery'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport notification from './assets/sound.ogg'\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    const { socketURL, setSocket, sendMessage, setTyping, setUsers } = this.props;\r\n    const socket = io(socketURL);\r\n    setSocket(socket);\r\n    socket.on('connect', _ => {\r\n\r\n      socket.on(RECIVE_MESSAGE, (msg) => {\r\n        sendMessage('global', msg);\r\n        this.recivingMsg();\r\n      });\r\n\r\n      socket.on(RECIVE_PMESSAGE, (msg) => {\r\n        sendMessage(msg.dest, msg.cont);\r\n        this.recivingMsg();\r\n      });\r\n\r\n      socket.on(RECIVE_TYPING, (nickname) => {\r\n        setTyping(nickname + ' is typing');\r\n        setTimeout(_ => { setTyping('') }, 2000)\r\n      });\r\n\r\n      socket.on(RECIVE_ONLINE, (onlineUsers) => {\r\n        console.log(onlineUsers.length);\r\n        setUsers(onlineUsers)\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  recivingMsg = _ => {\r\n    const { sound, vibration, user } = this.props;\r\n    $('.message-area').animate({\r\n      scrollTop: $('.message-area')[0] ? $('.message-area')[0].scrollHeight : 0\r\n    }, 500);\r\n    if (sound === true && user.nickname) {\r\n      new Audio(notification).play()\r\n    }\r\n    if (vibration === true && user.nickname) {\r\n      navigator.vibrate(200);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Route render={({ location }) => (\r\n        <TransitionGroup>\r\n          <CSSTransition\r\n            key={location.key}\r\n            timeout={1000}\r\n            classNames='fade'>\r\n            <Switch location={location}>\r\n              <Route path=\"/\" exact component={Login}></Route>\r\n              <Route path=\"/:nickname\" component={MessageArea}></Route>\r\n            </Switch>\r\n          </CSSTransition>\r\n        </TransitionGroup>\r\n      )} />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    socketURL: state.socketURL,\r\n    sound: state.sound,\r\n    vibration: state.vibration,\r\n    user: state.user\r\n  }\r\n}\r\n\r\nconst mapStateToDispatch = (dispatch) => {\r\n  return {\r\n    setSocket: val => { dispatch(setSocket(val)) },\r\n    sendMessage: (dest, cont) => { dispatch(sendMessage(dest, cont)) },\r\n    setTyping: (val) => { dispatch(setTyping(val)) },\r\n    setUsers: val => { dispatch(setUsers(val)) }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapStateToDispatch)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CREATE_USER,\r\n    SET_SOCKET,\r\n    SET_ERROR,\r\n    SET_NICKNAME,\r\n    SEND_MESSAGE,\r\n    SET_MESSAGE,\r\n    SET_TYPING,\r\n    UPDATE_USERS,\r\n    CHAT_WITH,\r\n    SET_SOUND,\r\n    SET_VIBRATION\r\n} from \"../../CONSTANTS\";\r\n\r\nconst initState = {\r\n    // socketURL: window.location.hostname === 'localhost' ? 'http://localhost:8080' : 'http://192.168.1.2:8080',\r\n    socketURL: '/',\r\n    socket: null,\r\n    nickname: '',\r\n    message: '',\r\n    typing: '',\r\n    error: '',\r\n    vibration: true,\r\n    sound: true,\r\n    user: {},\r\n    chatWith: {},\r\n    messages: {\r\n        global: []\r\n    },\r\n    onlineUsers: []\r\n};\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n\r\n        case SET_SOCKET:\r\n            return {\r\n                ...state,\r\n                socket: action.val\r\n            }\r\n\r\n        case SET_VIBRATION:\r\n            return {\r\n                ...state,\r\n                vibration: action.val\r\n            }\r\n        case SET_SOUND:\r\n            return {\r\n                ...state,\r\n                sound: action.val\r\n            }\r\n\r\n        case SET_NICKNAME:\r\n            return {\r\n                ...state,\r\n                nickname: action.val\r\n            }\r\n\r\n        case SET_TYPING:\r\n            return {\r\n                ...state,\r\n                typing: action.val\r\n            }\r\n\r\n        case CREATE_USER:\r\n            return {\r\n                ...state,\r\n                user: action.val,\r\n                error: ''\r\n            }\r\n\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.val\r\n            }\r\n\r\n        case SET_MESSAGE:\r\n            return {\r\n                ...state,\r\n                message: action.val\r\n            }\r\n\r\n        case SEND_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: {\r\n                    ...state.messages,\r\n                    [action.val.dest]: state.messages[action.val.dest] ?\r\n                        [...state.messages[action.val.dest], action.val.cont] :\r\n                        [action.val.cont]\r\n                }\r\n            }\r\n\r\n        case UPDATE_USERS:\r\n            return {\r\n                ...state,\r\n                onlineUsers: action.val\r\n            }\r\n\r\n        case CHAT_WITH:\r\n            return {\r\n                ...state,\r\n                chatWith: action.val\r\n            }\r\n\r\n        default:\r\n            return {\r\n                ...state\r\n            }\r\n    }\r\n}\r\n\r\nexport default rootReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './store/reducers/rootReducer';\r\nimport { CSSTransition } from 'react-transition-group'\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <Provider store={store} >\r\n        <BrowserRouter>\r\n            <CSSTransition\r\n                in={true}\r\n                appear={true}\r\n                classNames='slideIn'\r\n                timeout={1000}>\r\n                <Route path=\"/\" component={App}></Route>\r\n            </CSSTransition>\r\n        </BrowserRouter>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = {\r\n    SET_SOCKET: 'SET_SOCKET',\r\n    SET_NICKNAME: 'SET_NICKNAME',\r\n    VERIFIY_USER: 'VERIFIY_USER',\r\n    SET_ERROR: 'SET_ERROR',\r\n    CREATE_USER: 'CREATE_USER',\r\n    TYPING: 'TYPING',\r\n    RECIVE_TYPING: 'RECIVE_TYPING',\r\n    SET_TYPING: 'SET_TYPING',\r\n    SET_MESSAGE: 'SET_MESSAGE',\r\n    SEND_MESSAGE: 'SEND_MESSAGE',\r\n    RECIVE_MESSAGE: 'RECIVE_MESSAGE',\r\n    SEND_PMESSAGE: 'SEND_PMESSAGE',\r\n    RECIVE_PMESSAGE: 'RECIVE_PMESSAGE',\r\n    RECIVE_ONLINE: 'RECIVE_ONLINE',\r\n    UPDATE_USERS: 'UPDATE_USERS',\r\n    CHAT_WITH: 'CHAT_WITH',\r\n    SET_VIBRATION: 'SET_VIBRATION',\r\n    SET_SOUND: 'SET_SOUND'\r\n}","module.exports = __webpack_public_path__ + \"static/media/sound.07388188.ogg\";"],"sourceRoot":""}